/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/MOlr7zY0NMH
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { IBM_Plex_Sans } from 'next/font/google'

ibm_plex_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { Button } from "@/components/ui/button"
import { useState } from 'react';
import { useRouter } from 'next/router';
import { ErrorMessage } from './error-message';

export function AssistantCreationForm() {
  const [name, setName] = useState('');
  const [prompt, setPrompt] = useState('');
  const [file, setFile] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      // Create assistant using VAPI
      const assistantResponse = await fetch('/api/create-assistant', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, prompt }),
      });

      if (!assistantResponse.ok) {
        throw new Error('Failed to create assistant');
      }

      const assistantData = await assistantResponse.json();

      // Upload training content if a file is selected
      if (file) {
        const formData = new FormData();
        formData.append('file', file);
        const fileResponse = await fetch('/api/upload-file', {
          method: 'POST',
          body: formData,
        });

        if (!fileResponse.ok) {
          throw new Error('Failed to upload file');
        }
      }

      // Redirect to success page
      router.push('/success');
    } catch (error: unknown) {
      console.error('Error creating assistant:', error);
      setError(error instanceof Error ? error.message : 'An error occurred while creating the assistant');
      setLoading(false);
    }
  };

  return (
    <div className="flex flex-col min-h-screen w-full">
      <header className="bg-background border-b">
        <nav className="flex items-center justify-between py-4">
          <div className="flex items-center gap-4">
            <Link href="#" className="flex items-center gap-2" prefetch={false}>
              <MountainIcon className="h-6 w-6" />
              <span className="text-lg font-bold">SimplyTalk.ai</span>
            </Link>
          </div>
          <div className="flex items-center gap-4">
            <Link
              href="#"
              className="group flex items-center gap-2 px-4 py-2 rounded-md bg-primary text-primary-foreground transition-colors hover:bg-primary/90"
              prefetch={false}
            >
              <UsersIcon className="h-5 w-5" />
              <span>Assistants</span>
            </Link>
            <Link
              href="#"
              className="group flex items-center gap-2 px-4 py-2 rounded-md bg-primary text-primary-foreground transition-colors hover:bg-primary/90"
              prefetch={false}
            >
              <PlusIcon className="h-5 w-5 text-primary-foreground" />
              <span>Create new Assistant</span>
            </Link>
            <Link
              href="#"
              className="group flex items-center gap-2 px-4 py-2 rounded-md transition-colors hover:bg-muted hover:text-foreground"
              prefetch={false}
            >
              <CreditCardIcon className="h-5 w-5 text-muted-foreground group-hover:text-foreground" />
              <span>Billing</span>
            </Link>
            <Link
              href="#"
              className="group flex items-center gap-2 px-4 py-2 rounded-md transition-colors hover:bg-muted hover:text-foreground"
              prefetch={false}
            >
              <SettingsIcon className="h-5 w-5 text-muted-foreground group-hover:text-foreground" />
              <span>Settings</span>
            </Link>
          </div>
        </nav>
      </header>
      <main className="flex-1 p-4 sm:p-6">
        <section className="mb-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold">Create New Assistant</h2>
          </div>
          <div className="mt-4 rounded-md border bg-background p-4">
            <form onSubmit={handleSubmit}>
              {error && <ErrorMessage message={error} />}
              <div className="grid gap-4">
                <div>
                  <Label htmlFor="name">Name</Label>
                  <Input id="name" type="text" value={name} onChange={(e) => setName(e.target.value)} required />
                </div>
                <div>
                  <Label htmlFor="prompt">System Prompt</Label>
                  <Textarea id="prompt" rows={4} value={prompt} onChange={(e) => setPrompt(e.target.value)} required />
                </div>
                <div>
                  <Label htmlFor="train">Train</Label>
                  <Input 
                    id="train" 
                    type="file" 
                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                      const files = e.target.files;
                      if (files && files.length > 0) {
                        setFile(files[0]);
                      }
                    }} 
                  />
                </div>
              </div>
              <div className="mt-4 flex justify-end gap-2">
                <Button type="submit" disabled={loading}>
                  {loading ? 'Creating...' : 'Create Assistant'}
                </Button>
              </div>
            </form>
          </div>
        </section>
      </main>
    </div>
  )
}

function CreditCardIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="20" height="14" x="2" y="5" rx="2" />
      <line x1="2" x2="22" y1="10" y2="10" />
    </svg>
  )
}


function MountainIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m8 3 4 8 5-5 5 15H2L8 3z" />
    </svg>
  )
}


function PlusIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  )
}


function SettingsIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" />
      <circle cx="12" cy="12" r="3" />
    </svg>
  )
}


function UploadIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
      <polyline points="17 8 12 3 7 8" />
      <line x1="12" x2="12" y1="3" y2="15" />
    </svg>
  )
}


function UsersIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
      <circle cx="9" cy="7" r="4" />
      <path d="M22 21v-2a4 4 0 0 0-3-3.87" />
      <path d="M16 3.13a4 4 0 0 1 0 7.75" />
    </svg>
  )
}
